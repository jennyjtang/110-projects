# -*- coding: utf-8 -*-
"""DS110 New Final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14fL2YdefMxnRn5rkmphVl4PyUmMyAeVb
"""

#For PM2.5.csv
from google.colab import files

uploaded = files.upload()

#For Population1.csv
from google.colab import files

uploaded = files.upload()

"""# **Merging Files**"""

import pandas as pd

df1 = pd.read_csv('PM2.5.csv')
df2 = pd.read_csv('Population1.csv')

df_merged = df1.merge(df2, on=['Location', 'Period'], how='inner')
df = df_merged[['ParentLocation','Location', 'Period', 'Dim1', 'FactValueNumeric', 'FactValueNumericLow', 'FactValueNumericHigh', 'PopTotal', 'PopDensity']]

"""# **Data Preparation**

## **America**
"""

America2 = df[df["ParentLocation"].isin (['Americas'])]

America1 = America2[America2["Location"].isin(['United States of America', 'Canada', 'Mexico', 'Brazil', 'Chile', 'Argentina', 'Peru', 'Honduras', 'Ecuador', 'Colombia', 'Belize', 'Uruguay', 'Guyana', 'Dominica', 'Haiti', 'Cuba', 'Panama', 'Costa Rica', 'Jamaica', 'Nicaragua', 'Guatemala', 'El Salvador', 'Dominican Republic'])]

America = America1[America1["Dim1"].isin(['Urban'])]
America

new_value = 0
i = 10
while i < 20:
  new_value = 2000 + i
  yearly_average = America[America["Period"].isin([new_value])].mean()
  print(yearly_average)
  i += 1

America_2010 = America[America["Period"].isin([2010])].mean()
America_2011 = America[America["Period"].isin([2011])].mean()
America_2012 = America[America["Period"].isin([2012])].mean()
America_2013 = America[America["Period"].isin([2013])].mean()
America_2014 = America[America["Period"].isin([2014])].mean()
America_2015 = America[America["Period"].isin([2015])].mean()
America_2016 = America[America["Period"].isin([2016])].mean()
America_2017 = America[America["Period"].isin([2017])].mean()
America_2018 = America[America["Period"].isin([2018])].mean()
America_2019 = America[America["Period"].isin([2019])].mean()

"""## **Europe**"""

Europe2 = df[df["ParentLocation"].isin (['Europe'])]

Europe1 = df[df["Location"].isin(['Germany', 'Switzerland', 'Austria', 'Belgium', 'Spain', 'Ireland', 'Greece', 'Portugal', 'France', 'Italy', 'Netherlands', 'Poland', 'Ukraine', 'Norway', 'Sweden', 'Romania', 'Denmark', 'Croatia', 'Finland', 'Iceland', 'Albania', 'Czechia', 'Hungary'])]

Europe = Europe1[Europe1["Dim1"].isin(['Urban'])]
Europe

new_value = 0
i = 10
while i < 20:
  new_value = 2000 + i
  yearly_average = Europe[Europe["Period"].isin([new_value])].mean()
  print(yearly_average)
  i += 1

Europe_2010 = Europe[Europe["Period"].isin([2010])].mean()
Europe_2011 = Europe[Europe["Period"].isin([2011])].mean()
Europe_2012 = Europe[Europe["Period"].isin([2012])].mean()
Europe_2013 = Europe[Europe["Period"].isin([2013])].mean()
Europe_2014 = Europe[Europe["Period"].isin([2014])].mean()
Europe_2015 = Europe[Europe["Period"].isin([2015])].mean()
Europe_2016 = Europe[Europe["Period"].isin([2016])].mean()
Europe_2017 = Europe[Europe["Period"].isin([2017])].mean()
Europe_2018 = Europe[Europe["Period"].isin([2018])].mean()
Europe_2019 = Europe[Europe["Period"].isin([2019])].mean()

"""## **Western Pacific**"""

Western_Pacific2 = df[df["ParentLocation"]. isin (['Western Pacific'])]

Western_Pacific1 = Western_Pacific2[Western_Pacific2["Location"].isin(['Australia', 'New Zealand', 'Fiji', 'Papua New Guinea', 'Solomon Islands', 'Vanuatu', 'Samoa', 'Marshall Islands', 'Kiribati', 'Tonga', 'Japan', 'Malaysia', 'Cambodia', 'Viet Nam', 'China', 'Mongolia', 'Brunei Darussalam', 'Palau', 'Philippines', 'Republic of Korea', 'Nauru', 'Cook Islands', 'Lao People\'s Democratic Republic'])]

Western_Pacific = Western_Pacific1[Western_Pacific1["Dim1"].isin(['Urban'])]
Western_Pacific

new_value = 0
i = 10
while i < 20:
  new_value = 2000 + i
  yearly_average = Western_Pacific[Western_Pacific["Period"].isin([new_value])].mean()
  print(yearly_average)
  i += 1

Western_Pacific_2010_Average = Western_Pacific[Western_Pacific["Period"].isin([2010])].mean()
Western_Pacific_2011_Average = Western_Pacific[Western_Pacific["Period"].isin([2011])].mean()
Western_Pacific_2012_Average = Western_Pacific[Western_Pacific["Period"].isin([2012])].mean()
Western_Pacific_2013_Average = Western_Pacific[Western_Pacific["Period"].isin([2013])].mean()
Western_Pacific_2014_Average = Western_Pacific[Western_Pacific["Period"].isin([2014])].mean()
Western_Pacific_2015_Average = Western_Pacific[Western_Pacific["Period"].isin([2015])].mean()
Western_Pacific_2016_Average = Western_Pacific[Western_Pacific["Period"].isin([2016])].mean()
Western_Pacific_2017_Average = Western_Pacific[Western_Pacific["Period"].isin([2017])].mean()
Western_Pacific_2018_Average = Western_Pacific[Western_Pacific["Period"].isin([2018])].mean()
Western_Pacific_2019_Average = Western_Pacific[Western_Pacific["Period"].isin([2019])].mean()

"""## **Africa**"""

Africa2 = df[df["ParentLocation"].isin (['Africa'])]

Africa1 = Africa2[Africa2["Location"].isin(['South Africa', 'Kenya', 'Nigeria', 'Algeria', 'Zambia', 'Niger', 'Ethiopia', 'Chad', 'Ghana', 'Angola', 'Senegal', 'Mali', 'Uganda', 'Cameroon', 'Madagascar', 'Gabon', 'Zimbabwe', 'Namibia', 'Liberia', 'Mozambique', 'Togo', 'Guinea', 'South Sudan'])]

Africa = Africa1[Africa1["Dim1"].isin(['Urban'])]
Africa

new_value = 0
i = 10
while i < 20:
  new_value = 2000 + i
  yearly_average = Africa[Africa["Period"].isin([new_value])].mean()
  print(yearly_average)
  i += 1

Africa_2010 = Africa[Africa["Period"].isin([2010])].mean()
Africa_2011 = Africa[Africa["Period"].isin([2011])].mean()
Africa_2012 = Africa[Africa["Period"].isin([2012])].mean()
Africa_2013 = Africa[Africa["Period"].isin([2013])].mean()
Africa_2014 = Africa[Africa["Period"].isin([2014])].mean()
Africa_2015 = Africa[Africa["Period"].isin([2015])].mean()
Africa_2016 = Africa[Africa["Period"].isin([2016])].mean()
Africa_2017 = Africa[Africa["Period"].isin([2017])].mean()
Africa_2018 = Africa[Africa["Period"].isin([2018])].mean()
Africa_2019 = Africa[Africa["Period"].isin([2019])].mean()

"""# **DATA BASE**"""

Years = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]
avg_pm_level_america = [America_2010['FactValueNumeric'], America_2011['FactValueNumeric'], America_2012['FactValueNumeric'], America_2013['FactValueNumeric'], America_2014['FactValueNumeric'], America_2015['FactValueNumeric'], America_2016['FactValueNumeric'], America_2017['FactValueNumeric'], America_2018['FactValueNumeric'], America_2019['FactValueNumeric']]
avg_pm_level_europe = [Europe_2010['FactValueNumeric'], Europe_2011['FactValueNumeric'], Europe_2012['FactValueNumeric'], Europe_2013['FactValueNumeric'],Europe_2014['FactValueNumeric'],Europe_2015['FactValueNumeric'],Europe_2016['FactValueNumeric'],Europe_2017['FactValueNumeric'],Europe_2018['FactValueNumeric'],Europe_2019['FactValueNumeric']]
avg_pm_level_western_pacific = [Western_Pacific_2010_Average['FactValueNumeric'], Western_Pacific_2011_Average['FactValueNumeric'],  Western_Pacific_2012_Average['FactValueNumeric'], Western_Pacific_2013_Average['FactValueNumeric'], Western_Pacific_2014_Average['FactValueNumeric'], Western_Pacific_2015_Average['FactValueNumeric'], Western_Pacific_2016_Average['FactValueNumeric'], Western_Pacific_2017_Average['FactValueNumeric'], Western_Pacific_2018_Average['FactValueNumeric'], Western_Pacific_2019_Average['FactValueNumeric']]
avg_pm_level_africa = [Africa_2010['FactValueNumeric'], Africa_2011['FactValueNumeric'],  Africa_2012['FactValueNumeric'], Africa_2013['FactValueNumeric'], Africa_2014['FactValueNumeric'], Africa_2015['FactValueNumeric'], Africa_2016['FactValueNumeric'], Africa_2017['FactValueNumeric'], Africa_2018['FactValueNumeric'], Africa_2019['FactValueNumeric']]

Years = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019]
pop_density_america = [America_2010['PopDensity'], America_2011['PopDensity'], America_2012['PopDensity'], America_2013['PopDensity'], America_2014['PopDensity'], America_2015['PopDensity'], America_2016['PopDensity'], America_2017['PopDensity'], America_2018['PopDensity'], America_2019['PopDensity']]
pop_density_europe = [Europe_2010['PopDensity'], Europe_2011['PopDensity'], Europe_2012['PopDensity'], Europe_2013['PopDensity'],Europe_2014['PopDensity'],Europe_2015['PopDensity'],Europe_2016['PopDensity'],Europe_2017['PopDensity'],Europe_2018['PopDensity'],Europe_2019['PopDensity']]
pop_density_wp = [Western_Pacific_2010_Average['PopDensity'], Western_Pacific_2011_Average['PopDensity'],  Western_Pacific_2012_Average['PopDensity'], Western_Pacific_2013_Average['PopDensity'], Western_Pacific_2014_Average['PopDensity'], Western_Pacific_2015_Average['PopDensity'], Western_Pacific_2016_Average['PopDensity'], Western_Pacific_2017_Average['PopDensity'], Western_Pacific_2018_Average['PopDensity'], Western_Pacific_2019_Average['PopDensity']]
pop_density_africa = [Africa_2010['PopDensity'], Africa_2011['PopDensity'],  Africa_2012['PopDensity'], Africa_2013['PopDensity'], Africa_2014['PopDensity'], Africa_2015['PopDensity'], Africa_2016['PopDensity'], Africa_2017['PopDensity'], Africa_2018['PopDensity'], Africa_2019['PopDensity']]

America_Averages = {
    2010: America_2010,
    2011: America_2011,
    2012: America_2012,
    2013: America_2013,
    2014: America_2014,
    2015: America_2015,
    2016: America_2016,
    2017: America_2017,
    2018: America_2018,
    2019: America_2019
}

Europe_Averages = {
    2010: Europe_2010,
    2011: Europe_2011,
    2012: Europe_2012,
    2013: Europe_2013,
    2014: Europe_2014,
    2015: Europe_2015,
    2016: Europe_2016,
    2017: Europe_2017,
    2018: Europe_2018,
    2019: Europe_2019
}

Western_Pacific_Averages = {
    2010: Western_Pacific_2010_Average,
    2011: Western_Pacific_2011_Average,
    2012: Western_Pacific_2012_Average,
    2013: Western_Pacific_2013_Average,
    2014: Western_Pacific_2014_Average,
    2015: Western_Pacific_2015_Average,
    2016: Western_Pacific_2016_Average,
    2017: Western_Pacific_2017_Average,
    2018: Western_Pacific_2018_Average,
    2019: Western_Pacific_2019_Average
}

Africa_Averages = {
    2010: Africa_2010,
    2011: Africa_2011,
    2012: Africa_2012,
    2013: Africa_2013,
    2014: Africa_2014,
    2015: Africa_2015,
    2016: Africa_2016,
    2017: Africa_2017,
    2018: Africa_2018,
    2019: Africa_2019
}

"""# **Exploratory Statistics**

## **T-Tests**

### **America vs Other Regions**

**America vs Europe**
"""

import scipy.stats

# T Test comparing PM levels across two regions
for year in range(2010, 2020):
    America_year_data = America[America["Period"] == year]
    Europe_year_data = Europe[Europe["Period"] == year]
    _, p_value = scipy.stats.ttest_ind(America_year_data['FactValueNumeric'], Europe_year_data['FactValueNumeric'])
    print(f"P Value for {year}:", p_value, "\n")

"""**America vs Western Pacific**"""

import scipy.stats

# T Test comparing PM levels across two regions
for year in range(2010, 2020):
    America_year_data = America[America["Period"] == year]
    Western_Pacific_year_data = Western_Pacific[Western_Pacific["Period"] == year]
    _, p_value = scipy.stats.ttest_ind(America_year_data['FactValueNumeric'], Western_Pacific_year_data['FactValueNumeric'])
    print(f"P Value for {year}:", p_value, "\n")

"""**America vs Africa**"""

import scipy.stats

# T Test comparing PM levels across two regions
for year in range(2010, 2020):
    America_year_data = America[America["Period"] == year]
    Africa_year_data = Africa[Africa["Period"] == year]
    _, p_value = scipy.stats.ttest_ind(America_year_data['FactValueNumeric'], Africa_year_data['FactValueNumeric'])
    print(f"P Value for {year}:", p_value, "\n")

"""### **Europe vs Other Regions**

**Europe vs America**
"""

import scipy.stats

# T Test comparing PM levels across two regions
for year in range(2010, 2020):
    Europe_year_data = Europe[Europe["Period"] == year]
    America_year_data = America[America["Period"] == year]
    _, p_value = scipy.stats.ttest_ind(Europe_year_data['FactValueNumeric'], America_year_data['FactValueNumeric'])
    print(f"P Value for {year}:", p_value, "\n")

"""**Europe vs Western Pacific**"""

import scipy.stats

# T Test comparing PM levels across two regions
for year in range(2010, 2020):
    Europe_year_data = Europe[Europe["Period"] == year]
    Western_Pacific_year_data = Western_Pacific[Western_Pacific["Period"] == year]
    _, p_value = scipy.stats.ttest_ind(Europe_year_data['FactValueNumeric'], Western_Pacific_year_data['FactValueNumeric'])
    print(f"P Value for {year}:", p_value, "\n")

"""**Europe vs Africa**"""

import scipy.stats

# T Test comparing PM levels across two regions
for year in range(2010, 2020):
    Europe_year_data = Europe[Europe["Period"] == year]
    Africa_year_data = Africa[Africa["Period"] == year]
    _, p_value = scipy.stats.ttest_ind(Europe_year_data['FactValueNumeric'], Africa_year_data['FactValueNumeric'])
    print(f"P Value for {year}:", p_value, "\n")

"""### **Western Pacific vs Other Regions**

**Western Pacific vs. America**
"""

import scipy.stats

# T Test comparing PM levels across two regions
for year in range(2010, 2020):
    Western_Pacific_year_data = Western_Pacific[Western_Pacific["Period"] == year]
    America_year_data = America[America["Period"] == year]
    _, p_value = scipy.stats.ttest_ind(Western_Pacific_year_data['FactValueNumeric'], America_year_data['FactValueNumeric'])
    print(f"P Value for {year}:", p_value, "\n")

"""**Western Pacific vs Europe**"""

import scipy.stats

# T Test comparing PM levels across two regions
for year in range(2010, 2020):
    Western_Pacific_year_data = Western_Pacific[Western_Pacific["Period"] == year]
    Europe_year_data = Europe[Europe["Period"] == year]
    _, p_value = scipy.stats.ttest_ind(Western_Pacific_year_data['FactValueNumeric'], Europe_year_data['FactValueNumeric'])
    print(f"P Value for {year}:", p_value, "\n")

"""**Western Pacific vs. Africa**"""

import scipy.stats

# T Test comparing PM levels across two regions
for year in range(2010, 2020):
    Western_Pacific_year_data = Western_Pacific[Western_Pacific["Period"] == year]
    Africa_year_data = Africa[Africa["Period"] == year]
    _, p_value = scipy.stats.ttest_ind(Western_Pacific_year_data['FactValueNumeric'], Africa_year_data['FactValueNumeric'])
    print(f"P Value for {year}:", p_value, "\n")

"""### **Africa vs Other Regions**

**Africa vs America**
"""

import scipy.stats

# T Test comparing PM levels across two regions
for year in range(2010, 2020):
    Africa_year_data = Africa[Africa["Period"] == year]
    America_year_data = America[America["Period"] == year]
    _, p_value = scipy.stats.ttest_ind(Africa_year_data['FactValueNumeric'], America_year_data['FactValueNumeric'])
    print(f"P Value for {year}:", p_value, "\n")

"""**Africa vs Europe**"""

import scipy.stats

# T Test comparing PM levels across two regions
for year in range(2010, 2020):
    Africa_year_data = Africa[Africa["Period"] == year]
    Europe_year_data = Europe[Europe["Period"] == year]
    _, p_value = scipy.stats.ttest_ind(Africa_year_data['FactValueNumeric'], Europe_year_data['FactValueNumeric'])
    print(f"P Value for {year}:", p_value, "\n")

"""**Africa vs Western Pacific**"""

import scipy.stats

# T Test comparing PM levels across two regions
for year in range(2010, 2020):
    Africa_year_data = Africa[Africa["Period"] == year]
    Western_Pacific_year_data = Western_Pacific[Western_Pacific["Period"] == year]
    _, p_value = scipy.stats.ttest_ind(Africa_year_data['FactValueNumeric'], Western_Pacific_year_data['FactValueNumeric'])
    print(f"P Value for {year}:", p_value, "\n")

"""## **Correlation**

### **America Correlation Population Density vs. Particulate Matter**
"""

from scipy import stats
print("The correlation between population density and the level of particulate matter for")

# Correlation between population density and pm levels for 2010
America_2010_data = America[America["Period"] == 2010]
corr_America_2010, _ = stats.pearsonr(America_2010_data['PopDensity'], America_2010_data['FactValueNumeric'])
print(f"2010: {corr_America_2010}")

# Correlation between population density and pm levels for 2011
America_2011_data = America[America["Period"] == 2011]
corr_America_2011, _ = stats.pearsonr(America_2011_data['PopDensity'], America_2011_data['FactValueNumeric'])
print(f"2011: {corr_America_2011}")

# Correlation between population density and pm levels for 2012
America_2012_data = America[America["Period"] == 2012]
corr_America_2012, _ = stats.pearsonr(America_2012_data['PopDensity'], America_2012_data['FactValueNumeric'])
print(f"2012: {corr_America_2012}")

# Correlation between population density and pm levels for 2013
America_2013_data = America[America["Period"] == 2013]
corr_America_2013, _ = stats.pearsonr(America_2013_data['PopDensity'], America_2013_data['FactValueNumeric'])
print(f"2013: {corr_America_2013}")

# Correlation between population density and pm levels for 2014
America_2014_data = America[America["Period"] == 2014]
corr_America_2014, _ = stats.pearsonr(America_2014_data['PopDensity'], America_2014_data['FactValueNumeric'])
print(f"2014: {corr_America_2014}")

# Correlation between population density and pm levels for 2015
America_2015_data = America[America["Period"] == 2015]
corr_America_2015, _ = stats.pearsonr(America_2015_data['PopDensity'], America_2015_data['FactValueNumeric'])
print(f"2015: {corr_America_2015}")

# Correlation between population density and pm levels for 2016
America_2016_data = America[America["Period"] == 2016]
corr_America_2016, _ = stats.pearsonr(America_2016_data['PopDensity'], America_2016_data['FactValueNumeric'])
print(f"2016: {corr_America_2016}")

# Correlation between population density and pm levels for 2017
America_2017_data = America[America["Period"] == 2017]
corr_America_2017, _ = stats.pearsonr(America_2017_data['PopDensity'], America_2017_data['FactValueNumeric'])
print(f"2017: {corr_America_2017}")

# Correlation between population density and pm levels for 2018
America_2018_data = America[America["Period"] == 2018]
corr_America_2018, _ = stats.pearsonr(America_2018_data['PopDensity'], America_2018_data['FactValueNumeric'])
print(f"2018: {corr_America_2018}")

# Correlation between population density and pm levels for 2019
America_2019_data = America[America["Period"] == 2019]
corr_America_2019, _ = stats.pearsonr(America_2019_data['PopDensity'], America_2019_data['FactValueNumeric'])
print(f"2019: {corr_America_2019}")

# Average correlation between population density and pm levels
America_PopDensity = America['PopDensity'].tolist()
America_FactValueNumeric = America['FactValueNumeric'].tolist()

corr_America, _ = stats.pearsonr(America_PopDensity, America_FactValueNumeric)


print(f"The Average correlation between population density and level of particulate matter in America: {corr_America}")

"""### **Europe Correlation Population Density vs. Particulate Matter**"""

from scipy import stats
print("The correlation between population density and the level of particulate matter for")

# Correlation between population density and pm levels for 2010
Europe_2010_data = Europe[Europe["Period"] == 2010]
corr_Europe_2010, _ = stats.pearsonr(Europe_2010_data['PopDensity'], Europe_2010_data['FactValueNumeric'])
print(f"2010: {corr_Europe_2010}")

# Correlation between population density and pm levels for 2011
Europe_2011_data = Europe[Europe["Period"] == 2011]
corr_Europe_2011, _ = stats.pearsonr(Europe_2011_data['PopDensity'], Europe_2011_data['FactValueNumeric'])
print(f"2011: {corr_Europe_2011}")

# Correlation between population density and pm levels for 2012
Europe_2012_data = Europe[Europe["Period"] == 2012]
corr_Europe_2012, _ = stats.pearsonr(Europe_2012_data['PopDensity'], Europe_2012_data['FactValueNumeric'])
print(f"2012: {corr_Europe_2012}")

# Correlation between population density and pm levels for 2013
Europe_2013_data = Europe[Europe["Period"] == 2013]
corr_Europe_2013, _ = stats.pearsonr(Europe_2013_data['PopDensity'], Europe_2013_data['FactValueNumeric'])
print(f"2013: {corr_Europe_2013}")

# Correlation between population density and pm levels for 2014
Europe_2014_data = Europe[Europe["Period"] == 2014]
corr_Europe_2014, _ = stats.pearsonr(Europe_2014_data['PopDensity'], Europe_2014_data['FactValueNumeric'])
print(f"2014: {corr_Europe_2014}")

# Correlation between population density and pm levels for 2015
Europe_2015_data = Europe[Europe["Period"] == 2015]
corr_Europe_2015, _ = stats.pearsonr(Europe_2015_data['PopDensity'], Europe_2015_data['FactValueNumeric'])
print(f"2015: {corr_Europe_2015}")

# Correlation between population density and pm levels for 2016
Europe_2016_data = Europe[Europe["Period"] == 2016]
corr_Europe_2016, _ = stats.pearsonr(Europe_2016_data['PopDensity'], Europe_2016_data['FactValueNumeric'])
print(f"2016: {corr_Europe_2016}")

# Correlation between population density and pm levels for 2017
Europe_2017_data = Europe[Europe["Period"] == 2017]
corr_Europe_2017, _ = stats.pearsonr(Europe_2017_data['PopDensity'], Europe_2017_data['FactValueNumeric'])
print(f"2017: {corr_Europe_2017}")

# Correlation between population density and pm levels for 2018
Europe_2018_data = Europe[Europe["Period"] == 2018]
corr_Europe_2018, _ = stats.pearsonr(Europe_2018_data['PopDensity'], Europe_2018_data['FactValueNumeric'])
print(f"2018: {corr_Europe_2018}")

# Correlation between population density and pm levels for 2019
Europe_2019_data = Europe[Europe["Period"] == 2019]
corr_Europe_2019, _ = stats.pearsonr(Europe_2019_data['PopDensity'], Europe_2019_data['FactValueNumeric'])
print(f"2019: {corr_Europe_2019}")

# Average correlation between population density and pm levels
Europe_PopDensity = Europe['PopDensity'].tolist()
Europe_FactValueNumeric = Europe['FactValueNumeric'].tolist()

corr_Europe, _ = stats.pearsonr(Europe_PopDensity, Europe_FactValueNumeric)


print(f"The Average correlation between population density and level of particulate matter in Europe: {corr_Europe}")

"""### **Western Pacific Correlation Population Density vs. Particulate Matter**"""

from scipy import stats
print("The correlation between population density and the level of particulate matter for")

# Correlation between population density and pm levels for 2010
WP_2010_data = Western_Pacific[Western_Pacific["Period"] == 2010]
corr_WP_2010, _ = stats.pearsonr(WP_2010_data['PopDensity'], WP_2010_data['FactValueNumeric'])
print(f"2010: {corr_WP_2010}")

# Correlation between population density and pm levels for 2011
WP_2011_data = Western_Pacific[Western_Pacific["Period"] == 2011]
corr_WP_2011, _ = stats.pearsonr(WP_2011_data['PopDensity'], WP_2011_data['FactValueNumeric'])
print(f"2011: {corr_WP_2011}")

# Correlation between population density and pm levels for 2012
WP_2012_data = Western_Pacific[Western_Pacific["Period"] == 2012]
corr_WP_2012, _ = stats.pearsonr(WP_2012_data['PopDensity'], WP_2012_data['FactValueNumeric'])
print(f"2012: {corr_WP_2012}")

# Correlation between population density and pm levels for 2013
WP_2013_data = Western_Pacific[Western_Pacific["Period"] == 2013]
corr_WP_2013, _ = stats.pearsonr(WP_2013_data['PopDensity'], WP_2013_data['FactValueNumeric'])
print(f"2013: {corr_WP_2013}")

# Correlation between population density and pm levels for 2014
WP_2014_data = Western_Pacific[Western_Pacific["Period"] == 2014]
corr_WP_2014, _ = stats.pearsonr(WP_2014_data['PopDensity'], WP_2014_data['FactValueNumeric'])
print(f"2014: {corr_WP_2014}")

# Correlation between population density and pm levels for 2015
WP_2015_data = Western_Pacific[Western_Pacific["Period"] == 2015]
corr_WP_2015, _ = stats.pearsonr(WP_2015_data['PopDensity'], WP_2015_data['FactValueNumeric'])
print(f"2015: {corr_WP_2015}")

# Correlation between population density and pm levels for 2016
WP_2016_data = Western_Pacific[Western_Pacific["Period"] == 2016]
corr_WP_2016, _ = stats.pearsonr(WP_2016_data['PopDensity'], WP_2016_data['FactValueNumeric'])
print(f"2016: {corr_WP_2016}")

# Correlation between population density and pm levels for 2017
WP_2017_data = Western_Pacific[Western_Pacific["Period"] == 2017]
corr_WP_2017, _ = stats.pearsonr(WP_2017_data['PopDensity'], WP_2017_data['FactValueNumeric'])
print(f"2017: {corr_WP_2017}")

# Correlation between population density and pm levels for 2018
WP_2018_data = Western_Pacific[Western_Pacific["Period"] == 2018]
corr_WP_2018, _ = stats.pearsonr(WP_2018_data['PopDensity'], WP_2018_data['FactValueNumeric'])
print(f"2018: {corr_WP_2018}")

# Correlation between population density and pm levels for 2019
WP_2019_data = Western_Pacific[Western_Pacific["Period"] == 2019]
corr_WP_2019, _ = stats.pearsonr(WP_2019_data['PopDensity'], WP_2019_data['FactValueNumeric'])
print(f"2019: {corr_WP_2019}")

# Average correlation between population density and pm levels
WP_PopDensity = Western_Pacific['PopDensity'].tolist()
WP_FactValueNumeric = Western_Pacific['FactValueNumeric'].tolist()

corr_WP, _ = stats.pearsonr(WP_PopDensity, WP_FactValueNumeric)


print(f"The Average correlation between population density and level of particulate matter in Western Pacific: {corr_WP}")

"""### **Africa Correlation Population Density vs. Particulate Matter**"""

from scipy import stats
print("The correlation between population desnity and the level of particulate matter for")

# Correlation between population density and pm levels for 2010
Africa_2010_data = Africa[Africa["Period"] == 2010]
corr_Africa_2010, _ = stats.pearsonr(Africa_2010_data['PopDensity'], Africa_2010_data['FactValueNumeric'])
print(f"2010: {corr_Africa_2010}")

# Correlation between population density and pm levels for 2011
Africa_2011_data = Africa[Africa["Period"] == 2011]
corr_Africa_2011, _ = stats.pearsonr(Africa_2011_data['PopDensity'], Africa_2011_data['FactValueNumeric'])
print(f"2011: {corr_Africa_2011}")

# Correlation between population density and pm levels for 2012
Africa_2012_data = Africa[Africa["Period"] == 2012]
corr_Africa_2012, _ = stats.pearsonr(Africa_2012_data['PopDensity'], Africa_2012_data['FactValueNumeric'])
print(f"2012: {corr_Africa_2012}")

# Correlation between population density and pm levels for 2013
Africa_2013_data = Africa[Africa["Period"] == 2013]
corr_Africa_2013, _ = stats.pearsonr(Africa_2013_data['PopDensity'], Africa_2013_data['FactValueNumeric'])
print(f"2013: {corr_Africa_2013}")

# Correlation between population density and pm levels for 2014
Africa_2014_data = Africa[Africa["Period"] == 2014]
corr_Africa_2014, _ = stats.pearsonr(Africa_2014_data['PopDensity'], Africa_2014_data['FactValueNumeric'])
print(f"2014: {corr_Africa_2014}")

# Correlation between population density and pm levels for 2015
Africa_2015_data = Africa[Africa["Period"] == 2015]
corr_Africa_2015, _ = stats.pearsonr(Africa_2015_data['PopDensity'], Africa_2015_data['FactValueNumeric'])
print(f"2015: {corr_Africa_2015}")

# Correlation between population density and pm levels for 2016
Africa_2016_data = Africa[Africa["Period"] == 2016]
corr_Africa_2016, _ = stats.pearsonr(Africa_2016_data['PopDensity'], Africa_2016_data['FactValueNumeric'])
print(f"2016: {corr_Africa_2016}")

# Correlation between population density and pm levels for 2017
Africa_2017_data = Africa[Africa["Period"] == 2017]
corr_Africa_2017, _ = stats.pearsonr(Africa_2017_data['PopDensity'], Africa_2017_data['FactValueNumeric'])
print(f"2017: {corr_Africa_2017}")

# Correlation between population density and pm levels for 2018
Africa_2018_data = Africa[Africa["Period"] == 2018]
corr_Africa_2018, _ = stats.pearsonr(Africa_2018_data['PopDensity'], Africa_2018_data['FactValueNumeric'])
print(f"2018: {corr_Africa_2018}")

# Correlation between population density and pm levels for 2019
Africa_2019_data = Africa[Africa["Period"] == 2019]
corr_Africa_2019, _ = stats.pearsonr(Africa_2019_data['PopDensity'], Africa_2019_data['FactValueNumeric'])
print(f"2019: {corr_Africa_2019}")

# Average correlation between population density and pm levels
Africa_PopDensity = Africa['PopDensity'].tolist()
Africa_FactValueNumeric = Africa['FactValueNumeric'].tolist()

corr_Africa, _ = stats.pearsonr(Africa_PopDensity, Africa_FactValueNumeric)


print(f"The Average correlation between population density and level of particulate matter in Africa: {corr_Africa}")

"""# **Visualization**

## **Heat Map**
"""

import pandas as pd
import seaborn as sns

# Create dictionary
data = {
    "Years": Years,
    "America": avg_pm_level_america,
    "Europe": avg_pm_level_europe,
    "Western Pacific": avg_pm_level_western_pacific,
    "Africa": avg_pm_level_africa
}

# Create dataframe and set "Years" as the index
df = pd.DataFrame(data)
df = df.set_index("Years").transpose()

# Heatmap
sns.set()
sns.heatmap(df, cmap = "Blues", annot = True, fmt = ".1f", linewidths = .5).set(title='Average Particulate Matter Levels (µg/m^3) Per Year By Region')

"""## **Bar Chart**

### **Average Particulate Matter Levels By Year**
"""

import numpy as np
import pandas as pd
import seaborn as sns

# Create dictionary
plot = {
    'Years': np.tile(Years, 4),
    'Region': ['America'] * 10 + ['Europe'] * 10 + ['Western Pacific'] * 10 + ['Africa'] * 10,
    'Average Particulate Matter Level': pop_density_america + pop_density_europe + pop_density_wp + pop_density_africa
}

# Dataframe
df = pd.DataFrame(plot)

# Plot
sns.barplot(x='Years', y='Average Particulate Matter Level', hue='Region', data=df, palette='muted').set(title='Average Particulate Matter Levels (µg/m^3) By Year')

"""### **Average Population Density By Year**"""

import numpy as np
import pandas as pd
import seaborn as sns

# Create dictionary
plot = {
    'Years': np.tile(Years, 4),
    'Region': ['America'] * 10 + ['Europe'] * 10 + ['Western Pacific'] * 10 + ['Africa'] * 10,
    'Average Population Density': pop_density_america + pop_density_europe + pop_density_wp + pop_density_africa
}

# Dataframe
df = pd.DataFrame(plot)

# Plot
sns.barplot(x='Years', y='Average Population Density', hue='Region', data=df, palette='muted').set(title='Average Population Density (person/km^2) By Year')

"""## **Regression Model**

### **America**
"""

import numpy as np
import matplotlib.pyplot as plt
import sklearn.linear_model as lm
from sklearn.linear_model import LinearRegression

# Filter data for 2010 to 2019
America_filtered_PopDensity = America[(America['Period'] >= 2010) & (America['Period'] <= 2019)]
X_america = np.array(America['PopDensity']).reshape(-1, 1)
Y_america = np.array(America['FactValueNumeric'])

# Linear Regression model
linear_model_america = LinearRegression()
linear_model_america.fit(X_america, Y_america)

# Predict PM levels using trained model
y_hat_america = linear_model_america.predict(X_america)

# Scatter plot and regression line
plt.scatter(X_america, Y_america, color='blue')
plt.plot(X_america, y_hat_america, color='blue')

# Labels
plt.title("PM2.5 Levels in Relation to Population Density in America")
plt.xlabel("Population Density (person/km^2)")
plt.ylabel("PM2.5 Levels (µg/m^3)")

"""### **Europe**"""

# Filter data for 2010 to 2019
Europe_filtered_PopDensity = Europe[(Europe['Period'] >= 2010) & (Europe['Period'] <= 2019)]
X_Europe = np.array(Europe['PopDensity']).reshape(-1, 1)
Y_Europe = np.array(Europe['FactValueNumeric'])

# Linear Regression model
linear_model_Europe = LinearRegression()
linear_model_Europe.fit(X_Europe, Y_Europe)

# Predict PM levels using trained model
y_hat_Europe = linear_model_Europe.predict(X_Europe)

# Scatter plot and regression line
plt.scatter(X_Europe, Y_Europe, color='green')
plt.plot(X_Europe, y_hat_Europe, color='green')

# Labels
plt.title("PM2.5 Levels in Relation to Population Density in Europe")
plt.xlabel("Population Density (person/km^2)")
plt.ylabel("PM2.5 Levels (µg/m^3)")

"""### **Western Pacific**"""

# Filter data for 2010 to 2019
wp_filtered_PopDensity = Western_Pacific[(Western_Pacific['Period'] >= 2010) & (Western_Pacific['Period'] <= 2019)]
X_wp = np.array(Western_Pacific['PopDensity']).reshape(-1,1)
Y_wp = np.array(Western_Pacific['FactValueNumeric'])

# Linear Regression model
linear_model_wp = LinearRegression()
linear_model_wp.fit(X_wp, Y_wp)

# Predict PM levels using trained model
y_hat_wp = linear_model_wp.predict(X_wp)

# Scatter plot and regression line
plt.scatter(X_wp, Y_wp, color='purple')
plt.plot(X_wp, y_hat_wp, color='purple')

# Labels
plt.title("PM2.5 Levels in Relation to Population Density in Western Pacific")
plt.xlabel("Population Density (person/km^2)")
plt.ylabel("PM2.5 Levels (µg/m^3)")

"""### **Africa**"""

# Filter data for 2010 to 2019
africa_filtered_PopDensity = Africa[(Africa['Period'] >= 2010) & (Africa['Period'] <= 2019)]
X_africa = np.array(Africa['PopDensity']).reshape(-1,1)
Y_africa = np.array(Africa['FactValueNumeric'])

# Linear Regression model
linear_model_africa = LinearRegression()
linear_model_africa.fit(X_africa, Y_africa)

# Predict PM levels using trained model
y_hat_africa = linear_model_africa.predict(X_africa)

# Scatter plot and regression line
plt.scatter(X_africa, Y_africa, color='orange')
plt.plot(X_africa, y_hat_africa, color='orange')

# Labels
plt.title("PM2.5 Levels in Relation to Population Density in Africa")
plt.xlabel("Population Density (person/km^2)")
plt.ylabel("PM2.5 Levels (µg/m^3)")

"""## **3D Regression**

### **America**
"""

import numpy as np
import matplotlib.pyplot as plt
import sklearn.linear_model as lm
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from mpl_toolkits.mplot3d import Axes3D
from sklearn.metrics import mean_squared_error

X = America[['Period', 'PopDensity']].values
y = America['FactValueNumeric'].values

#TRAINING SECTION START
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

#scatterplot
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

ax.dist = 12
ax.scatter(X_test[:, 0], X_test[:, 1], y_test, c='blue', marker='o', label='Actual data points')
ax.set_xlabel('Years')
ax.set_ylabel('Population Density')
ax.set_zlabel('PM2.5 Levels')

#meshgrid
Years_range = np.linspace(X_test[:, 0].min(), X_test[:, 0].max(), 10)
pop_density_range = np.linspace(X_test[:, 1].min(), X_test[:, 1].max(), 10)
Years_range, pop_density_range = np.meshgrid(Years_range, pop_density_range)
pm25_levels_pred = model.predict(np.c_[Years_range.ravel(), pop_density_range.ravel()])
pm25_levels_pred = pm25_levels_pred.reshape(Years_range.shape)

ax.plot_surface(Years_range, pop_density_range, pm25_levels_pred, alpha=0.5, color='red')

plt.title('PM2.5 Levels (µg/m^3) VS Population Density (person/km^2) Over Years In America')
plt.legend()
plt.show()

"""### **Europe**"""

import numpy as np
import matplotlib.pyplot as plt
import sklearn.linear_model as lm
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from mpl_toolkits.mplot3d import Axes3D
from sklearn.metrics import mean_squared_error

X = Europe[['Period', 'PopDensity']].values
y = Europe['FactValueNumeric'].values

#TRAINING SECTION START
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

#scatterplot
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

ax.dist = 12
ax.scatter(X_test[:, 0], X_test[:, 1], y_test, c='blue', marker='o', label='Actual data points')
ax.set_xlabel('Years')
ax.set_ylabel('Population Density')
ax.set_zlabel('PM2.5 Levels')

#meshgrid
Years_range = np.linspace(X_test[:, 0].min(), X_test[:, 0].max(), 10)
pop_density_range = np.linspace(X_test[:, 1].min(), X_test[:, 1].max(), 10)
Years_range, pop_density_range = np.meshgrid(Years_range, pop_density_range)
pm25_levels_pred = model.predict(np.c_[Years_range.ravel(), pop_density_range.ravel()])
pm25_levels_pred = pm25_levels_pred.reshape(Years_range.shape)

ax.plot_surface(Years_range, pop_density_range, pm25_levels_pred, alpha=0.5, color='red')

plt.title('PM2.5 Levels (µg/m^3) VS Population Density (person/km^2) Over Years In Europe')
plt.legend()
plt.show()

"""### **Western Pacific**"""

import numpy as np
import matplotlib.pyplot as plt
import sklearn.linear_model as lm
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from mpl_toolkits.mplot3d import Axes3D
from sklearn.metrics import mean_squared_error

X = Western_Pacific[['Period', 'PopDensity']].values
y = Western_Pacific['FactValueNumeric'].values

#TRAINING SECTION START
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

#scatterplot
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

ax.dist = 12
ax.scatter(X_test[:, 0], X_test[:, 1], y_test, c='blue', marker='o', label='Actual data points')
ax.set_xlabel('Years')
ax.set_ylabel('Population Density')
ax.set_zlabel('PM2.5 Levels')

#meshgrid
Years_range = np.linspace(X_test[:, 0].min(), X_test[:, 0].max(), 10)
pop_density_range = np.linspace(X_test[:, 1].min(), X_test[:, 1].max(), 10)
Years_range, pop_density_range = np.meshgrid(Years_range, pop_density_range)
pm25_levels_pred = model.predict(np.c_[Years_range.ravel(), pop_density_range.ravel()])
pm25_levels_pred = pm25_levels_pred.reshape(Years_range.shape)

ax.plot_surface(Years_range, pop_density_range, pm25_levels_pred, alpha=0.5, color='red')

plt.title('PM2.5 Levels (µg/m^3) VS Population Density (person/km^2) Over Years In Western Pacific')
plt.legend()
plt.show()

"""### **Africa**"""

import numpy as np
import matplotlib.pyplot as plt
import sklearn.linear_model as lm
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from mpl_toolkits.mplot3d import Axes3D
from sklearn.metrics import mean_squared_error

X = Africa[['Period', 'PopDensity']].values
y = Africa['FactValueNumeric'].values

#TRAINING SECTION START
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

#scatterplot
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

ax.dist = 12
ax.scatter(X_test[:, 0], X_test[:, 1], y_test, c='blue', marker='o', label='Actual data points')
ax.set_xlabel('Years')
ax.set_ylabel('Population Density')
ax.set_zlabel('PM2.5 Levels')

#meshgrid
Years_range = np.linspace(X_test[:, 0].min(), X_test[:, 0].max(), 10)
pop_density_range = np.linspace(X_test[:, 1].min(), X_test[:, 1].max(), 10)
Years_range, pop_density_range = np.meshgrid(Years_range, pop_density_range)
pm25_levels_pred = model.predict(np.c_[Years_range.ravel(), pop_density_range.ravel()])
pm25_levels_pred = pm25_levels_pred.reshape(Years_range.shape)

ax.plot_surface(Years_range, pop_density_range, pm25_levels_pred, alpha=0.5, color='red')

plt.title('PM2.5 Levels (µg/m^3) VS Population Density (person/km^2) Over Years In Africa')
plt.legend()
plt.show()

"""##**Line Graph**

### **Average Particulate Matter Levels Over Years**
"""

import seaborn as sns

# Create dictionary
data = {'Years': Years,
        'PM Level America': avg_pm_level_america,
        'PM Level Europe': avg_pm_level_europe,
        'PM Level Western Pacific': avg_pm_level_western_pacific,
        'PM Level Africa': avg_pm_level_africa}

# Dataframe
df = pd.DataFrame(data)
df_melted = df.melt("Years", var_name = "Regions", value_name = "Average Particulate Matter Level")

# Plot
sns.lineplot(x = "Years", y = "Average Particulate Matter Level", hue = "Regions", data = df_melted).set(title='Average Particulate Matter Levels (µg/m^3) Over Years')

"""### **Average Population Density Over Years**"""

# Create dictionary
data = {'Years': Years,
        'Population Density America': pop_density_america,
        'Population Density Europe': pop_density_europe,
        'Population Density Western Pacific': pop_density_wp,
        'Population Density Africa': pop_density_africa}

# Dataframe
df = pd.DataFrame(data)
df_melted = df.melt("Years", var_name = "Regions", value_name = "Average Population Density")

# Plot
sns.lineplot(x = "Years", y = "Average Population Density", hue = "Regions", data = df_melted).set(title='Average Population Density (person/km^2) Over Years')

"""# **Machine Learning**

## **Linear Regression**

### **America**
"""

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

# Filter data for 2010 to 2019
America_filtered_PopDensity = America[(America['Period'] >= 2010) & (America['Period'] <= 2019)]
X_america_aggregated = America_filtered_PopDensity.groupby('Period')['PopDensity'].mean().tolist()

# Reshape lists to arrays
X_america = np.array(X_america_aggregated).reshape(-1, 1)
Y_america = np.array(avg_pm_level_america)

# Linear Regression model
linear_model_america = LinearRegression()
linear_model_america.fit(X_america, Y_america)

# Predict PM 2.5 levels
y_hat_america = linear_model_america.predict(X_america)

# Split data into training, validation, and test sets
X_temp, X_test, Y_temp, Y_test = train_test_split(X_america, Y_america, test_size=0.2, random_state=42)
X_train, X_val, Y_train, Y_val = train_test_split(X_temp, Y_temp, test_size=0.5, random_state=42)

# Predict on the validation set
y_val_pred = linear_model_america.predict(X_val)
mse_val = mean_squared_error(Y_val, y_val_pred)
print(f'Validation MSE: {mse_val}')

# Test on test set
y_test_pred = linear_model_america.predict(X_test)
mse_test = mean_squared_error(Y_test, y_test_pred)
print(f'Test MSE: {mse_test}')

# Calculate R-Squared value on test set
r2_test = r2_score(Y_test, y_test_pred)
print(f'Test R-Squared: {r2_test}')

"""### **Europe**"""

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

# Filter data for 2010 to 2019
Europe_filtered_PopDensity = Europe[(Europe['Period'] >= 2010) & (Europe['Period'] <= 2019)]
X_Europe_aggregated = Europe_filtered_PopDensity.groupby('Period')['PopDensity'].mean().tolist()

# Reshape lists to arrays
X_Europe = np.array(X_Europe_aggregated).reshape(-1, 1)
Y_Europe = np.array(avg_pm_level_europe)

# Linear Regression model
linear_model_Europe = LinearRegression()
linear_model_Europe.fit(X_Europe, Y_Europe)

# Predict PM 2.5 levels
y_hat_Europe = linear_model_Europe.predict(X_Europe)

# Split data into training, validation, and test sets
X_temp, X_test, Y_temp, Y_test = train_test_split(X_Europe, Y_Europe, test_size=0.2, random_state=42)
X_train, X_val, Y_train, Y_val = train_test_split(X_temp, Y_temp, test_size=0.5, random_state=42)

# Predict on the validation set
y_val_pred = linear_model_Europe.predict(X_val)
mse_val = mean_squared_error(Y_val, y_val_pred)
print(f'Validation MSE: {mse_val}')

# Test on test set
y_test_pred = linear_model_Europe.predict(X_test)
mse_test = mean_squared_error(Y_test, y_test_pred)
print(f'Test MSE: {mse_test}')

# Calculate R-Squared value on test set
r2_test = r2_score(Y_test, y_test_pred)
print(f'Test R-Squared: {r2_test}')

"""### **Western Pacific**"""

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

# Filter data for 2010 to 2019
Western_Pacific_filtered_PopDensity = Western_Pacific[(Western_Pacific['Period'] >= 2010) & (Western_Pacific['Period'] <= 2019)]
X_Western_Pacific_aggregated = Western_Pacific_filtered_PopDensity.groupby('Period')['PopDensity'].mean().tolist()

# Reshape lists to arrays
X_Western_Pacific = np.array(X_Western_Pacific_aggregated).reshape(-1, 1)
Y_Western_Pacific = np.array(avg_pm_level_western_pacific)

# Linear Regression model
linear_model_Western_Pacific = LinearRegression()
linear_model_Western_Pacific.fit(X_Western_Pacific, Y_Western_Pacific)

# Predict PM 2.5 levels
y_hat_Western_Pacific = linear_model_Western_Pacific.predict(X_Western_Pacific)

# Split data into training, validation, and test sets
X_temp, X_test, Y_temp, Y_test = train_test_split(X_Western_Pacific, Y_Western_Pacific, test_size=0.2, random_state=42)
X_train, X_val, Y_train, Y_val = train_test_split(X_temp, Y_temp, test_size=0.5, random_state=42)

# Predict on the validation set
y_val_pred = linear_model_Western_Pacific.predict(X_val)
mse_val = mean_squared_error(Y_val, y_val_pred)
print(f'Validation MSE: {mse_val}')

# Test on test set
y_test_pred = linear_model_Western_Pacific.predict(X_test)
mse_test = mean_squared_error(Y_test, y_test_pred)
print(f'Test MSE: {mse_test}')

# Calculate R-Squared value on test set
r2_test = r2_score(Y_test, y_test_pred)
print(f'Test R-Squared: {r2_test}')

"""### **Africa**"""

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

# Filter data for 2010 to 2019
Africa_filtered_PopDensity = Africa[(Africa['Period'] >= 2010) & (Africa['Period'] <= 2019)]
X_Africa_aggregated = Africa_filtered_PopDensity.groupby('Period')['PopDensity'].mean().tolist()

# Reshape lists to arrays
X_Africa = np.array(X_Africa_aggregated).reshape(-1, 1)
Y_Africa = np.array(avg_pm_level_africa)

# Linear Regression model
linear_model_Africa = LinearRegression()
linear_model_Africa.fit(X_Africa, Y_Africa)

# Predict PM 2.5 levels
y_hat_Africa = linear_model_Africa.predict(X_Africa)

# Split data into training, validation, and test sets
X_temp, X_test, Y_temp, Y_test = train_test_split(X_Africa, Y_Africa, test_size=0.2, random_state=42)
X_train, X_val, Y_train, Y_val = train_test_split(X_temp, Y_temp, test_size=0.5, random_state=42)

# Predict on the validation set
y_val_pred = linear_model_Africa.predict(X_val)
mse_val = mean_squared_error(Y_val, y_val_pred)
print(f'Validation MSE: {mse_val}')

# Test on test set
y_test_pred = linear_model_Africa.predict(X_test)
mse_test = mean_squared_error(Y_test, y_test_pred)
print(f'Test MSE: {mse_test}')

# Calculate R-Squared value on test set
r2_test = r2_score(Y_test, y_test_pred)
print(f'Test R-Squared: {r2_test}')

"""## **Decision Tree Regressor**

### **America**
"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
import numpy as np

# Convert data into np array
years = years = np.array([2010,
                          2011,
                          2012,
                          2013,
                          2014,
                          2015,
                          2016,
                          2017,
                          2018,
                          2019]).reshape(-1,1)

avg_pm_level_america = np.array([America_2010['FactValueNumeric'],
                                 America_2011['FactValueNumeric'],
                                 America_2012['FactValueNumeric'],
                                 America_2013['FactValueNumeric'],
                                 America_2014['FactValueNumeric'],
                                 America_2015['FactValueNumeric'],
                                 America_2016['FactValueNumeric'],
                                 America_2017['FactValueNumeric'],
                                 America_2018['FactValueNumeric'],
                                 America_2019['FactValueNumeric']])

# Create a training, validation, and test set
X_train, X_temp, Y_train, Y_temp = train_test_split(years, avg_pm_level_america, test_size=0.2, random_state=42)
X_val, X_test, Y_val, Y_test = train_test_split(X_temp, Y_temp, test_size=0.5, random_state=42)

# Create a model
model = DecisionTreeRegressor()
model.fit(X_train, Y_train)

# Predict on the validation set
yhat_val = model.predict(X_val)

# Calculate MSE on the validation set
mse_val = mean_squared_error(Y_val, yhat_val)
print(f'Validation MSE: {mse_val}')

# Testing model on test set to measure accuracy
yhat_test = model.predict(X_test)
mse_test = mean_squared_error(Y_test, yhat_test)
print(f'Test MSE: {mse_test}')

"""### **Europe**"""

# Convert data into np array
years = years = np.array([2010,
                          2011,
                          2012,
                          2013,
                          2014,
                          2015,
                          2016,
                          2017,
                          2018,
                          2019]).reshape(-1,1)

avg_pm_level_europe = np.array([Europe_2010['FactValueNumeric'],
                                 Europe_2011['FactValueNumeric'],
                                 Europe_2012['FactValueNumeric'],
                                 Europe_2013['FactValueNumeric'],
                                 Europe_2014['FactValueNumeric'],
                                 Europe_2015['FactValueNumeric'],
                                 Europe_2016['FactValueNumeric'],
                                 Europe_2017['FactValueNumeric'],
                                 Europe_2018['FactValueNumeric'],
                                 Europe_2019['FactValueNumeric']])

# Create a training, validation, and test set
X_train, X_temp, Y_train, Y_temp = train_test_split(years, avg_pm_level_europe, test_size=0.2, random_state=42)
X_val, X_test, Y_val, Y_test = train_test_split(X_temp, Y_temp, test_size=0.5, random_state=42)

# Create a model
model = DecisionTreeRegressor()
model.fit(X_train, Y_train)

# Predict on the validation set
yhat_val = model.predict(X_val)

# Calculate MSE on the validation set
mse_val = mean_squared_error(Y_val, yhat_val)
print(f'Validation MSE: {mse_val}')

# Testing model on test set to measure accuracy
yhat_test = model.predict(X_test)
mse_test = mean_squared_error(Y_test, yhat_test)
print(f'Test MSE: {mse_test}')

"""### **Western Pacific**"""

# Convert data into np array
years = years = np.array([2010,
                          2011,
                          2012,
                          2013,
                          2014,
                          2015,
                          2016,
                          2017,
                          2018,
                          2019]).reshape(-1,1)

avg_pm_level_western_pacific = np.array([Western_Pacific_2010_Average['FactValueNumeric'],
                                 Western_Pacific_2011_Average['FactValueNumeric'],
                                 Western_Pacific_2012_Average['FactValueNumeric'],
                                 Western_Pacific_2013_Average['FactValueNumeric'],
                                 Western_Pacific_2014_Average['FactValueNumeric'],
                                 Western_Pacific_2015_Average['FactValueNumeric'],
                                 Western_Pacific_2016_Average['FactValueNumeric'],
                                 Western_Pacific_2017_Average['FactValueNumeric'],
                                 Western_Pacific_2018_Average['FactValueNumeric'],
                                 Western_Pacific_2019_Average['FactValueNumeric']])

# Create a training, validation, and test set
X_train, X_temp, Y_train, Y_temp = train_test_split(years, avg_pm_level_western_pacific, test_size=0.2, random_state=42)
X_val, X_test, Y_val, Y_test = train_test_split(X_temp, Y_temp, test_size=0.5, random_state=42)

# Create a model
model = DecisionTreeRegressor()
model.fit(X_train, Y_train)

# Predict on the validation set
yhat_val = model.predict(X_val)

# Calculate MSE on the validation set
mse_val = mean_squared_error(Y_val, yhat_val)
print(f'Validation MSE: {mse_val}')

# Testing model on test set to measure accuracy
yhat_test = model.predict(X_test)
mse_test = mean_squared_error(Y_test, yhat_test)
print(f'Test MSE: {mse_test}')

"""### **Africa**"""

# Convert data into np array
years = years = np.array([2010,
                          2011,
                          2012,
                          2013,
                          2014,
                          2015,
                          2016,
                          2017,
                          2018,
                          2019]).reshape(-1,1)

avg_pm_level_africa = np.array([Africa_2010['FactValueNumeric'],
                                 Africa_2011['FactValueNumeric'],
                                 Africa_2012['FactValueNumeric'],
                                 Africa_2013['FactValueNumeric'],
                                 Africa_2014['FactValueNumeric'],
                                 Africa_2015['FactValueNumeric'],
                                 Africa_2016['FactValueNumeric'],
                                 Africa_2017['FactValueNumeric'],
                                 Africa_2018['FactValueNumeric'],
                                 Africa_2019['FactValueNumeric']])

# Create a training, validation, and test set
X_train, X_temp, Y_train, Y_temp = train_test_split(years, avg_pm_level_africa, test_size=0.2, random_state=42)
X_val, X_test, Y_val, Y_test = train_test_split(X_temp, Y_temp, test_size=0.5, random_state=42)

# Create a model
model = DecisionTreeRegressor()
model.fit(X_train, Y_train)

# Predict on the validation set
yhat_val = model.predict(X_val)

# Calculate MSE on the validation set
mse_val = mean_squared_error(Y_val, yhat_val)
print(f'Validation MSE: {mse_val}')

# Testing model on test set to measure accuracy
yhat_test = model.predict(X_test)
mse_test = mean_squared_error(Y_test, yhat_test)
print(f'Test MSE: {mse_test}')